<!DOCTYPE html>
<html>
    <head>
        <title>Yapılacaklar Listesi Uygulaması</title>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">

        <link rel="stylesheet" type="text/css" href="kutuphane/basic.css">
        <script src="kutuphane/basic.js" type="text/javascript" charset="utf-8"></script>

        <style>

            body {
                overflow: hidden;
            }

        </style>

        <script>

        /*

        YAPILACAKLAR LISTESI UYGULAMASI:

        - Yapılacaklar listesini tutan bir uygulama. 
        - Uygulama kapatıldığında, bilgiler, local storage'da saklanıyor.
        - Bu projeyi; mobil (android, ios), web ve masaüstü uygulaması olarak paketlemeyi deneyebilirsiniz:

        https://cordova.apache.org/

        */

        var APP_WIDTH = 500
        var APP_MAX_WIDTH = 500

        // Başlangıç sayfasının taşıyıcısı
        var a0

        // Görevlerin, nesne listesi.
        var tasks = []
        // Kaydedilecek bilgi.
        var tasksData = []

        // Sık kullanılan nesnelere, daha kullanışlı isimler ver
        var txtNewTask
        var lblDeleteCount

        // İlk çalışan fonksiyon.
        var start = function() {

            // Gerekirse, tüm sayfaları sığdır.
            page.fit(APP_WIDTH, APP_MAX_WIDTH)

            // Kaydedilmiş bilgiyi geri al, daha önce kaydedilmemiş ise boş dizi oluştur.
            tasksData = storage.load("todo-tasks-data") || []

            // NESNE: Başlangıç sayfasının taşıyıcısı.
            a0 = cbox(0, 0, 500, page.height)
            that.color = "white"
            that.center("left")

            // NESNE: Yeni görev eklemek için taşıyıcı kutu.
            a0.b1 = cbox(10, 10, 480, 80)
            that.color = "whitesmoke"
            that.border = 0
            that.round = 16
            
            // NESNE: Yeni görevin yazılacağı metin kutusu.
            a0.b1.txtNewTask = ctxt(20, 15, 380)
            that.minimal = 1
            that.color = "transparent"
            that.inputElement.setAttribute("placeholder", "Bir görev giriniz.")
            that.onChange(addBtnClicked)
            // Nesne için, 2 isim de kullanılabilsin.
            txtNewTask = a0.b1.txtNewTask

            // NOT: Ama uzun olan isim, aynı zamanda nesnenin,
            // İlk sayfanın, bölümlenmiş 1. kutusunun içinde olduğunu,
            // bize hatırlattığından dolayı, daha kullanışlı olabilir.
            // Sayfa ve nesne sayıları arttığında, 
            // isimlerin temsil ettiği nesneleri hatırlamak zorlaşabilir.

            // NESNE: Yeni görevi ekleyecek buton.
            a0.b1.lblAddButton = clbl()
            that.text = "+"
            that.textAlign = "center"
            that.color = "#23BCC1BB"
            that.textColor = "rgba(255, 255, 255, 0.95)"
            that.height = 50
            that.width = that.height
            that.fontSize = 36
            that.round = 25
            that.aline(a0.b1.txtNewTask, "right", 5)
            that.onClick(addBtnClicked)

            // NESNE: Eklenenen görevlerin taşıyıcısı.
            a0.b2 = cbox(10, 100, 480, page.height - 110)
            that.border = 0
            that.color = "white"
            that.scrollY = 1

            // NESNE: Silme bölümü için taşıyıcı kutu.
            a0.b3 = cbox(10, 10, 480, 80)
            that.color = "whitesmoke"
            that.round = 16
            that.visible = 0

            // NESNE: Silme resminin taşıyıcısı
            a0.b3.b1 = cbox(0, 0, 55, 55)
            that.color = "#ED6D5230"
            that.round = 30
            that.center()
            that.onClick(removeSelectedTasks)

            // NESNE: Silme resmi
            a0.b3.b1.imgDelete = cimg(0, 0, 35, 35)
            that.load("resimler/28/trash.svg")
            that.opacity = 0.9
            that.center()

            // NESNE: Silme resminin sayı bilgisi
            a0.b3.lblCount = clbl(a0.b3.b1.left + 41, a0.b3.b1.top - 4, "auto", "auto")
            that.text = "0"
            that.spaceY = 2
            that.spaceX = 7
            that.color = "white"
            that.fontSize = 16
            that.border = 1
            that.borderColor = "#141414"
            that.textColor = "#141414"
            that.element.style.fontFamily = "opensans-bold"
            that.round = 50
            that.opacity = 0.7
            // Nesne için, 2 isim de kullanılabilsin.
            lblDeleteCount = a0.b3.lblCount

            // Sayfa yeniden açıldığında, eski kayıtları oluştur.
            refreshTasks();

            // Her sayfa boyutu değiştiğinde, çalıştır.
            page.onResize(pageResized)

        }

        // Sayfa boyutu değiştiğinde, taşıyıcı sayfayı ortala.
        var pageResized = function() {

            page.fit(APP_WIDTH, APP_MAX_WIDTH)

            a0.b2.height = page.height - 110
            a0.center("left")

        }

        // Tüm görevleri temizle ve bilgiye göre yeniden oluştur.
        var refreshTasks = function() {

            a0.b2.text = ""
            tasks = []

            // Sayfa yeniden açıldığında, eski kayıtları oluştur.
            for (var i = (tasksData.length - 1); i >= 0; i--) {
                addTask(tasksData[i])
            }
        
        }

        var addBtnClicked = function() {

            if (a0.b1.txtNewTask.text != "") {

                addTask(a0.b1.txtNewTask.text)
                tasksData.unshift(a0.b1.txtNewTask.text)
                storage.save("todo-tasks-data", tasksData)

                a0.b1.txtNewTask.text = ""

            }

        }

        // Yeni görev ekle.
        var addTask = function(taskText) {

            var newItem = createTaskItem(taskText)
            a0.b2.add(newItem)

            tasks.unshift(newItem)

            // Otomatik boyut hesaplaması tamamlandıktan sonra, nesneleri yeniden hizala.
            newItem.lblText.onResize(repositionTasks)

            // NOT: Görevlerin, her bir yazısı için onResize() eklenmiş;
            // Bir görevin yazısının boyutu değiştiğinde, tüm görevler yeniden konumlandırılıyor.

        }

        // Görev nesnelerini yeniden alt alta diz.
        var repositionTasks = function() {

            var top = 0

            for (var i = 0; i < tasks.length; i++) {
                tasks[i].top = top
                tasks[i].height = tasks[i].lblText.height + 20

                top += tasks[i].height
            }

        }

        // Yeni görev nesnesi oluştur.
        var createTaskItem = function(taskText) {

            // NESNE: Bir görevin taşıyıcısı
            var object = cbox(0, 0, 480, 100)
            that.color = "white"
            that.round = 4
            that.onClick(taskItemClicked)
            // Görevler nesnelerine, küçük bir hareket ekle.
            that.setMotion("top 0.3s")

            // NESNE: Bir görevin yazısı
            object.lblText = clbl(50, 10, 410, "auto")
            that.color = "transparent"
            that.text = taskText

            // NESNE: Görev yazısının başındaki, seçim alanı
            object.boxTick = cbox(15, 15, 20, 20)
            that.round = 10
            that.border = 1
            that.color = "whitesmoke"
            that.borderColor = "lightgray"

            makeBasicObject(object)

            return object

        }

        // Üzrerine basılan görevi işaretler.
        var taskItemClicked = function(self) {

            if (self.boxTick.color != "tomato") {

                self.boxTick.color = "tomato"
                self.boxTick.border = 0
                self.lblText.textColor = "tomato"
                // İşaretlenmiş sayısını arttır.
                a0.b3.lblCount.text = num(a0.b3.lblCount.text) + 1

            } else {

                self.boxTick.color = "whitesmoke"
                self.boxTick.border = 1
                self.lblText.textColor = basic.TEXT_COLOR
                a0.b3.lblCount.text = num(a0.b3.lblCount.text) - 1

            }

            // Silme butonunu göster veya gizle.
            if (num(a0.b3.lblCount.text) > 0) {
                a0.b3.visible = 1
            } else {
                a0.b3.visible = 0
            }

        }

        // İşaretlenen görevleri sil.
        var removeSelectedTasks = function() {

            // İşaretlenmeyen görevlerin, yeni listesi.
            var newTasksData = []
            var newTasks = []

            // Tüm görevleri kontrol et.
            for (var i = 0; i < tasks.length; i++) {
                // Sadece seçili olmayanları, dizilere ekle.
                if(tasks[i].boxTick.color != "tomato") {
                    newTasksData.push(tasksData[i])
                    newTasks.push(tasks[i])
                } else {
                    // Seçili görev nesnelerini sil.
                    tasks[i].remove()
                }
            }

            // Kullanılan dizileri, yeni oluşturulan ile güncelle
            tasksData = newTasksData
            tasks = newTasks

            // Bilgileri kaydet.
            storage.save("todo-tasks-data", tasksData)

            // Görev nesnelerini, yeniden konumlandır.
            repositionTasks()

            // Silme resminin yazısını 0 yap.
            a0.b3.lblCount.text = "0"
            // Silme bölümünü görünmez yap.
            a0.b3.visible = 0

        }
        
        </script>

    </head>
    <body>
        
    </body>
</html>